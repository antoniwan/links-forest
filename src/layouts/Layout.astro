---
import { userConfig } from '../config/user.config';
import { themeConfig } from '../config/theme.config';
import type { ThemeName } from '../data/theme.types';
import { ThemeCycler } from '../components/ThemeCycler';
import { ProfilePicture } from '../components/ProfilePicture';
import { LinkCard } from '../components/LinkCard';
import { SocialIcons } from '../components/SocialIcons';
import { ThemeTransitionWrapper } from '../components/ThemeTransitionWrapper';
import { SecondaryLinks } from '../components/SecondaryLinks';
import { dataLogger } from '../utils/logger';

const { profile, theme, links, secondaryLinks, social } = userConfig;
const currentTheme = themeConfig[theme.active];

// Log the current theme
dataLogger('Layout initialized with theme:', theme.active);
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{profile.name} - LinkForest</title>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Cormorant+Garamond:wght@400;500;600;700&family=Roboto+Mono:wght@400;500;600&family=Montserrat:wght@400;500;600;700&family=Cinzel:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Quicksand:wght@400;500;600;700&family=EB+Garamond:wght@400;500;600;700&family=Raleway:wght@400;500;600;700&family=Lora:wght@400;500;600;700&display=swap" rel="stylesheet">
	</head>
	<body class={`${currentTheme.colors.text} ${currentTheme.styles.font} min-h-screen relative antialiased`}>
		<div class={`${currentTheme.colors.background} min-h-screen relative z-10 transition-colors duration-300`}>
			<!-- ThemeCycler will only be active in development mode -->
			<ThemeCycler client:load />
			<ThemeTransitionWrapper client:load>
				<div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 pt-16 pb-12">
					<header class="flex flex-col sm:flex-row justify-between items-center gap-6 mb-12">
						<div class="flex flex-col sm:flex-row items-center sm:items-start gap-6 text-center sm:text-left">
							<ProfilePicture 
								client:load
								name={profile.name}
								image={profile.image}
								themeId={theme.active}
								size="md"
							/>
							<div class="space-y-2">
								<h1 class="text-2xl sm:text-3xl font-bold tracking-tight">{profile.name}</h1>
								<p class="text-base sm:text-lg opacity-90 max-w-xl">{profile.subtitle}</p>
							</div>
						</div>
					</header>

					<main class="flex flex-col gap-6">
						{links.map((link) => (
							<LinkCard
								client:load
								href={link.url}
								title={link.title}
								description={link.description}
								accentColor={currentTheme.colors.accent}
							/>
						))}

						{secondaryLinks && secondaryLinks.length > 0 && (
							<SecondaryLinks
								client:load
								links={secondaryLinks}
								accentColor={currentTheme.colors.accent}
							/>
						)}
					</main>

					<footer class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-800">
						<SocialIcons 
							client:load
							socialLinks={social}
						/>
					</footer>
				</div>
			</ThemeTransitionWrapper>
		</div>

		<script>
			/** @type {import('../data/theme.types').ThemeName} */
			const ThemeName = {
				builder: 'builder',
				wolf: 'wolf',
				mystic: 'mystic',
				dragon: 'dragon',
				artist: 'artist',
				warrior: 'warrior',
				healer: 'healer',
				alchemist: 'alchemist',
				strategist: 'strategist',
				steward: 'steward'
			};

			// Listen for theme changes
			window.addEventListener('theme-change', (event) => {
				const customEvent = event as CustomEvent<{ theme: keyof typeof ThemeName }>;
				const theme = customEvent.detail.theme;
				const themeConfig = {
					builder: { 
						background: 'bg-stone-50 dark:bg-stone-900', 
						text: 'text-stone-900 dark:text-stone-50',
						font: 'font-builder',
						description: 'Creation, systems, form'
					},
					wolf: { 
						background: 'bg-gray-50 dark:bg-gray-900', 
						text: 'text-gray-900 dark:text-gray-50',
						font: 'font-wolf',
						description: 'Instinct, loyalty, protection'
					},
					mystic: { 
						background: 'bg-purple-50 dark:bg-purple-900', 
						text: 'text-purple-900 dark:text-purple-50',
						font: 'font-mystic',
						description: 'Spirituality, vision, cosmic threads'
					},
					dragon: { 
						background: 'bg-red-50 dark:bg-red-900', 
						text: 'text-red-900 dark:text-red-50',
						font: 'font-dragon',
						description: 'Power, force, will'
					},
					artist: { 
						background: 'bg-pink-50 dark:bg-pink-900', 
						text: 'text-pink-900 dark:text-pink-50',
						font: 'font-artist',
						description: 'Expression, creativity, truth'
					},
					warrior: { 
						background: 'bg-slate-50 dark:bg-slate-900', 
						text: 'text-slate-900 dark:text-slate-50',
						font: 'font-warrior',
						description: 'Action, discipline, focus'
					},
					healer: { 
						background: 'bg-emerald-50 dark:bg-emerald-900', 
						text: 'text-emerald-900 dark:text-emerald-50',
						font: 'font-healer',
						description: 'Regeneration, soothing, connection'
					},
					alchemist: { 
						background: 'bg-violet-50 dark:bg-violet-900', 
						text: 'text-violet-900 dark:text-violet-50',
						font: 'font-alchemist',
						description: 'Transformation, elements, ritual'
					},
					strategist: { 
						background: 'bg-blue-50 dark:bg-blue-900', 
						text: 'text-blue-900 dark:text-blue-50',
						font: 'font-strategist',
						description: 'Mind, planning, clarity'
					},
					steward: { 
						background: 'bg-green-50 dark:bg-green-900', 
						text: 'text-green-900 dark:text-green-50',
						font: 'font-steward',
						description: 'Legacy, care, generational vision'
					}
				} as Record<keyof typeof ThemeName, { background: string; text: string; font: string; description: string }>;
				
				const newTheme = themeConfig[theme];
				if (newTheme) {
					document.body.className = `${newTheme.background} ${newTheme.text} ${newTheme.font} min-h-screen relative antialiased`;
					console.log(`%cTheme changed to: ${theme}`, 'color: #4CAF50; font-weight: bold;');
					console.log(`%c${newTheme.description}`, 'color: #9E9E9E; font-style: italic;');
				}
			});
		</script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}

	/* Smooth scrolling */
	html {
		scroll-behavior: smooth;
	}

	/* Better text rendering */
	body {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
		text-rendering: optimizeLegibility;
	}

	/* Improved focus styles */
	:focus-visible {
		outline: 2px solid currentColor;
		outline-offset: 2px;
	}

	/* Improved selection styles */
	::selection {
		background-color: rgba(0, 0, 0, 0.1);
	}

	.dark ::selection {
		background-color: rgba(255, 255, 255, 0.1);
	}
</style>
