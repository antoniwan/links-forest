---
import { userConfig } from '../config/user.config';
import { themeConfig } from '../config/theme.config';
import type { ThemeName } from '../data/theme.types';
import { ThemeCycler } from '../components/ThemeCycler';
import ProfilePicture from '../components/ProfilePicture.astro';
import { LinkCard } from '../components/LinkCard';
import { SocialIcons } from '../components/SocialIcons';
import { dataLogger } from '../utils/logger';

const { profile, theme, links, social } = userConfig;
const currentTheme = themeConfig[theme.active];

// Log the current theme
dataLogger('Layout initialized with theme:', theme.active);
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{profile.name} - LinkForest</title>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	</head>
	<body class={`${currentTheme.colors.background} ${currentTheme.colors.text} min-h-screen`}>
		<!-- ThemeCycler will only be active in development mode -->
		<ThemeCycler client:load />
		<div class="container mx-auto px-4 py-8">
			<header class="flex justify-between items-center mb-8">
				<div class="flex items-center gap-4">
					<ProfilePicture 
						client:load
						name={profile.name}
						image={profile.image}
						themeId={theme.active}
					/>
					<div>
						<h1 class="text-2xl font-bold">{profile.name}</h1>
						<p class="text-gray-400">{profile.subtitle}</p>
					</div>
				</div>
			</header>

			<main class="space-y-4">
				{links.map((link) => (
					<LinkCard
						client:load
						href={link.url}
						title={link.title}
						description={link.description}
						accentColor={currentTheme.colors.accent}
					/>
				))}
			</main>

			<footer class="mt-8">
				<SocialIcons 
					client:load
					socialLinks={social}
				/>
			</footer>
		</div>

		<script>
			// Listen for theme changes
			window.addEventListener('theme-change', (event) => {
				const customEvent = event as CustomEvent<{ theme: ThemeName }>;
				const theme = customEvent.detail.theme;
				const themeConfig = {
					builder: { 
						background: 'bg-gradient-to-br from-stone-900 to-stone-700', 
						text: 'text-white',
						description: 'Creation, systems, form'
					},
					wolf: { 
						background: 'bg-gradient-to-br from-gray-900 to-gray-700', 
						text: 'text-white',
						description: 'Instinct, loyalty, protection'
					},
					mystic: { 
						background: 'bg-gradient-to-br from-purple-900 to-purple-700', 
						text: 'text-white',
						description: 'Spirituality, vision, cosmic threads'
					},
					dragon: { 
						background: 'bg-gradient-to-br from-red-900 to-red-700', 
						text: 'text-white',
						description: 'Power, force, will'
					},
					artist: { 
						background: 'bg-gradient-to-br from-pink-900 to-pink-700', 
						text: 'text-white',
						description: 'Expression, creativity, truth'
					},
					warrior: { 
						background: 'bg-gradient-to-br from-slate-900 to-slate-700', 
						text: 'text-white',
						description: 'Action, discipline, focus'
					},
					healer: { 
						background: 'bg-gradient-to-br from-emerald-900 to-emerald-700', 
						text: 'text-white',
						description: 'Regeneration, soothing, connection'
					},
					alchemist: { 
						background: 'bg-gradient-to-br from-violet-900 to-violet-700', 
						text: 'text-white',
						description: 'Transformation, elements, ritual'
					},
					strategist: { 
						background: 'bg-gradient-to-br from-blue-900 to-blue-700', 
						text: 'text-white',
						description: 'Mind, planning, clarity'
					},
					steward: { 
						background: 'bg-gradient-to-br from-green-900 to-green-700', 
						text: 'text-white',
						description: 'Legacy, care, generational vision'
					}
				} as Record<ThemeName, { background: string; text: string; description: string }>;
				
				const newTheme = themeConfig[theme];
				if (newTheme) {
					document.body.className = `${newTheme.background} ${newTheme.text} min-h-screen`;
					console.log(`%cTheme changed to: ${theme}`, 'color: #4CAF50; font-weight: bold;');
					console.log(`%c${newTheme.description}`, 'color: #9E9E9E; font-style: italic;');
				}
			});
		</script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
